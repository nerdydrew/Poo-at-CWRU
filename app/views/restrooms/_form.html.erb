<%= form_with(model: restroom, url: url, local: true) do |form| %>
  <% if restroom.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(restroom.errors.count, "error") %> prohibited this restroom from being saved:</h2>

      <ul>
      <% restroom.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <dl>
    <dt><%= form.label :building_id, class: "#{'field_with_errors' if @restroom.errors[:building].present? }" %></dt>
    <dd><%= form.collection_select :building_id, @buildings, :id, :name, selected: @building_id %>

    <dt><%= form.label :floor_id, class: "#{'field_with_errors' if @restroom.errors[:floor].present? }" %></dt>
    <dd><%= form.grouped_collection_select :floor_id, @buildings, :floor, :name, :id, :pretty_name, selected: @floor_id %></dd>

    <dt><%= form.label :name, class: "#{'field_with_errors' if @restroom.errors[:slug].present? }" %></dt>
    <dd>
      <%= form.text_field :name, required: true, class: "#{'field_with_errors' if @restroom.errors[:slug].present? }" %>
      <span class="minor">e.g. &ldquo;Across from room 223&rdquo; or &ldquo;Near the stairs&rdquo;</span>
    </dd>
  </dl>

  <dl>
    <dt><%= form.label :gender %></dt>
    <%= form.collection_radio_buttons :gender, Restroom.genders, :second, :first do |gender| %>
      <dd><%= gender.label { gender.radio_button(required: true) + " " + gender.text.capitalize } %></dd>
    <% end %>
  </dl>

  Number of&hellip; <span class="minor">(optional)</span>
  <dl class="numbers">
    <dt><%= form.label :sinks %></dt>
    <dd><%= form.number_field :sinks, min: 0, step: 1 %></dd>

    <dt><%= form.label :stalls %></dt>
    <dd><%= form.number_field :stalls, min: 0, step: 1 %></dd>

    <div id="urinalContainer">
      <dt><%= form.label :urinals %></dt>
      <dd><%= form.number_field :urinals, min: 0, step: 1 %></dd>
    </div>
  </dl>

  <dl>
    <dt><%= form.label :comments %></dt>
    <dd><%= form.text_area :comments, placeholder: "Optional. Remember you can review this restroom later." %></dd>
  </dl>

  <div class="actions">
    <%= form.submit "Add Restroom" %>
  </div>
<% end %>

<script>
  function showOrHideUrinals() {
    var selectedGender = document.querySelector('input[name="restroom[gender]"]:checked');
    var mayHaveUrinal = selectedGender == null || selectedGender.value != "female";
    document.getElementById("urinalContainer").style.display = mayHaveUrinal ? 'block' : 'none';
  }


  function filterFloors() {
    var selectedBuilding = document.getElementById("restroom_building_id");
    if (selectedBuilding == null) {
      return;
    }
    // Optgroups are grouped by name instead of ID to be user-friendly, so we need
    // to get the dropdown's text instead of the value.
    selectedBuilding = selectedBuilding.options[selectedBuilding.selectedIndex].text;

    // Replace the dropdown with the contents of the selected building's optgroup.
    floorDropdown.innerHTML = floorsByBuilding[selectedBuilding].innerHTML;
  }

  window.onload=function() {
    var genders = document.getElementsByName("restroom[gender]");
    for (var i=0; i<genders.length; i++) {
      genders[i].addEventListener('change', showOrHideUrinals);
    }

    showOrHideUrinals();

    // Map optgroups of floors by building name.
    floorDropdown = document.getElementById("restroom_floor_id");
    floorsByBuilding = {};
    for (var i=0; i<floorDropdown.children.length; i++) {
      var buildingName = floorDropdown.children[i].label;
      floorsByBuilding[buildingName] = floorDropdown.children[i].cloneNode(true);
    }

    document.getElementById("restroom_building_id").addEventListener('change', filterFloors);
    filterFloors();
    // Need to reselect the floor after filtering by current building.
    floorDropdown.value = <%= @floor_id %>;
  };
</script>